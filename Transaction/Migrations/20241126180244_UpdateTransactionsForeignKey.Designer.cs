// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Transaction.Data;

#nullable disable

namespace Transaction.Migrations
{
    [DbContext(typeof(TransactionDbContext))]
    [Migration("20241126180244_UpdateTransactionsForeignKey")]
    partial class UpdateTransactionsForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Transaction.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Transaction.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("transaction_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Перевод средств между счетами",
                            Name = "перевод"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Пополнение счета",
                            Name = "пополнение"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Списание средств со счета",
                            Name = "списание"
                        });
                });

            modelBuilder.Entity("Transaction.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FromAccountUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ToAccountUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountUserId");

                    b.HasIndex("ToAccountUserId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Transaction.Models.Transactions", b =>
                {
                    b.HasOne("Transaction.Models.Account", "FromAccountUser")
                        .WithMany("SentTransactions")
                        .HasForeignKey("FromAccountUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Transaction.Models.Account", "ToAccountUser")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ToAccountUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Transaction.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccountUser");

                    b.Navigation("ToAccountUser");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Transaction.Models.Account", b =>
                {
                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SentTransactions");
                });

            modelBuilder.Entity("Transaction.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
